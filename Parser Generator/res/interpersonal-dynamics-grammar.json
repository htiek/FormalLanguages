{
    "grammar": {
        "ANSWER": [
            { "production": ["TRUE"],     "code": "$$ = {};" },
            { "production": ["LOVELIST"], "code": "$$ = $1;" }
        ],
        "LOVELIST": [
            { "production": ["LOVESTMT"],          "code": "$$ = { $1 };" },
            { "production": ["LOVELIST", "OPTCOMMA", "LOVESTMT"], "code": "$1.push_back($3); $$ = $1;" }
        ],
        "LOVESTMT": [
            { "production": ["IDENTIFIER", "LPAREN", "NAME", "COMMA", "NAME", "RPAREN"],
              "code": "if ($1 != \"Loves\") throw std::runtime_error(\"Expecting 'true' or 'Loves'; found \" + $1);\n$$ = make_pair($3, $5);"}
        ],
        "NAME": [
            { "production": ["IDENTIFIER"],
              "code": "if ($1.size() != 2 || ($1[0] != 'p' && $1[0] != 'P') || $1[1] < '1' || $1[1] > '6') throw std::runtime_error(\"Invalid name: \" + $1);\n$$ = $1;"}
        ],
        "OPTCOMMA": [
            { "production": [],      "code": ""},
            { "production": ["COMMA"], "code": ""},
            { "production": ["AND"], "code": ""}
        ]
    },


    "start-symbol": "ANSWER",


    "priorities": [

    ],

    "nonterminal-types": {
        "ANSWER":    "std::vector<std::pair<std::string, std::string>>",
        "LOVELIST":  "std::vector<std::pair<std::string, std::string>>",
        "LOVESTMT":  "std::pair<std::string, std::string>",
        "NAME":      "std::string"
    },

    "header-extras": [
        "#include <utility>",
        "#include <stdexcept>"
    ],

    "verbose": false,

    "parser-name": "IntDyn"
}
